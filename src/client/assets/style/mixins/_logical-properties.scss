/**
 * Logical Properties Mixins
 * SCSS mixins and functions to support consistent logical property usage
 */

/* ===== LOGICAL SPACING MIXINS ===== */

/**
 * Apply consistent block spacing (top/bottom in horizontal writing modes)
 * @param {string} $size - Design token size key (e.g., '3', '4', '6')
 */
@mixin block-spacing($size) {
  padding-block: var(--pav-space-#{$size});
}

/**
 * Apply consistent inline spacing (left/right in horizontal writing modes)
 * @param {string} $size - Design token size key
 */
@mixin inline-spacing($size) {
  padding-inline: var(--pav-space-#{$size});
}

/**
 * Apply consistent spacing in both directions
 * @param {string} $block-size - Block direction spacing
 * @param {string} $inline-size - Inline direction spacing
 */
@mixin logical-spacing($block-size, $inline-size: $block-size) {
  padding-block: var(--pav-space-#{$block-size});
  padding-inline: var(--pav-space-#{$inline-size});
}

/**
 * Apply logical margin with design tokens
 * @param {string} $block-size - Block direction margin
 * @param {string} $inline-size - Inline direction margin (defaults to block)
 */
@mixin logical-margin($block-size, $inline-size: $block-size) {
  margin-block: var(--pav-space-#{$block-size});
  margin-inline: var(--pav-space-#{$inline-size});
}

/* ===== LOGICAL BORDER MIXINS ===== */

/**
 * Apply border using logical properties
 * @param {string} $sides - Which sides: 'block', 'inline', 'block-start', etc.
 * @param {string} $width - Border width token (default: 'thin')
 * @param {string} $color - Border color token (default: 'border')
 */
@mixin logical-border($sides, $width: 'thin', $color: 'border') {
  border-#{$sides}: var(--pav-border-width-#{$width}) solid var(--pav-color-#{$color});
}

/**
 * Apply border radius using logical properties
 * @param {string} $size - Radius size token
 * @param {string} $corners - Which corners: 'start-start', 'end-end', etc.
 */
@mixin logical-border-radius($size, $corners: null) {
  @if $corners {
    border-#{$corners}-radius: var(--pav-border-radius-#{$size});
  } @else {
    border-radius: var(--pav-border-radius-#{$size});
  }
}

/* ===== TEXT FLOW MIXINS ===== */

/**
 * Create consistent text flow spacing using logical properties
 * @param {string} $spacing - Bottom margin spacing token
 */
@mixin text-flow($spacing: '3') {
  margin-block-end: var(--pav-space-#{$spacing});
  
  &:last-child {
    margin-block-end: 0;
  }
}

/**
 * Create inline element spacing (for buttons, badges, etc.)
 * @param {string} $spacing - End margin spacing token
 */
@mixin inline-flow($spacing: '2') {
  margin-inline-end: var(--pav-space-#{$spacing});
  
  &:last-child {
    margin-inline-end: 0;
  }
}

/* ===== RESPONSIVE LOGICAL MIXINS ===== */

/**
 * Apply responsive logical properties
 * @param {string} $breakpoint - Breakpoint token
 * @param {map} $properties - Map of logical properties and values
 */
@mixin responsive-logical($breakpoint, $properties) {
  @media (min-width: var(--pav-breakpoint-#{$breakpoint})) {
    @each $property, $value in $properties {
      #{$property}: $value;
    }
  }
}

/* ===== LAYOUT PATTERN MIXINS ===== */

/**
 * Create a logical container pattern
 * @param {string} $block-padding - Block direction padding
 * @param {string} $inline-padding - Inline direction padding
 * @param {string} $max-inline-size - Maximum inline size
 */
@mixin logical-container($block-padding: '4', $inline-padding: '4', $max-inline-size: null) {
  padding-block: var(--pav-space-#{$block-padding});
  padding-inline: var(--pav-space-#{$inline-padding});
  margin-inline: auto;
  
  @if $max-inline-size {
    max-inline-size: var(--pav-breakpoint-#{$max-inline-size});
  }
}

/**
 * Create a logical card/panel pattern
 * @param {string} $padding-size - Internal padding size
 * @param {string} $border-radius - Border radius size
 * @param {string} $spacing - Bottom margin spacing
 */
@mixin logical-panel($padding-size: '4', $border-radius: 'md', $spacing: '4') {
  @include logical-spacing($padding-size);
  @include logical-border-radius($border-radius);
  @include logical-border('all');

  margin-block-end: var(--pav-space-#{$spacing});
  
  &:last-child {
    margin-block-end: 0;
  }
}

/**
 * Create logical button spacing pattern
 * @param {string} $block-padding - Block direction padding
 * @param {string} $inline-padding - Inline direction padding
 */
@mixin logical-button($block-padding: '2', $inline-padding: '4') {
  padding-block: var(--pav-space-#{$block-padding});
  padding-inline: var(--pav-space-#{$inline-padding});
}

/* ===== LOGICAL PROPERTY UTILITIES ===== */

/**
 * Convert physical property to logical equivalent
 * Useful for component migration
 */
@function to-logical($property, $value) {
  $logical-map: (
    'margin-left': 'margin-inline-start',
    'margin-right': 'margin-inline-end',
    'margin-top': 'margin-block-start',
    'margin-bottom': 'margin-block-end',
    'padding-left': 'padding-inline-start',
    'padding-right': 'padding-inline-end',
    'padding-top': 'padding-block-start',
    'padding-bottom': 'padding-block-end',
    'border-left': 'border-inline-start',
    'border-right': 'border-inline-end',
    'border-top': 'border-block-start',
    'border-bottom': 'border-block-end',
    'left': 'inset-inline-start',
    'right': 'inset-inline-end',
    'top': 'inset-block-start',
    'bottom': 'inset-block-end',
    'width': 'inline-size',
    'height': 'block-size',
    'text-align: left': 'text-align: start',
    'text-align: right': 'text-align: end'
  );
  
  @if map-has-key($logical-map, $property) {
    @return map-get($logical-map, $property);
  }
  
  @return $property;
}

/* ===== DIRECTIONAL UTILITIES ===== */

/**
 * Apply styles only in LTR direction
 */
@mixin ltr-only {
  html[dir="ltr"] & {
    @content;
  }
}

/**
 * Apply styles only in RTL direction
 */
@mixin rtl-only {
  html[dir="rtl"] & {
    @content;
  }
}

/**
 * Create directional-aware icon positioning
 * @param {string} $position - 'start' or 'end'
 * @param {string} $spacing - Spacing token
 */
@mixin icon-position($position, $spacing: '2') {
  @if $position == 'start' {
    margin-inline-end: var(--pav-space-#{$spacing});
  } @else if $position == 'end' {
    margin-inline-start: var(--pav-space-#{$spacing});
  }
}
